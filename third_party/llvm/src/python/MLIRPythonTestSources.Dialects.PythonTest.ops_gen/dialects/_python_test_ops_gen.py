
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _python_test_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "python_test"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AttributedOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.attributed_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, mandatory_i32, *, optional_i32=None, unit=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["mandatory_i32"] = mandatory_i32
    if optional_i32 is not None: attributes["optional_i32"] = optional_i32
    if bool(unit): attributes["unit"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def mandatory_i32(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["mandatory_i32"])

  @mandatory_i32.setter
  def mandatory_i32(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mandatory_i32"] = value

  @builtins.property
  def optional_i32(self):
    if "optional_i32" not in self.operation.attributes:
      return None
    return _ods_ir.IntegerAttr(self.operation.attributes["optional_i32"])

  @optional_i32.setter
  def optional_i32(self, value):
    if value is not None:
      self.operation.attributes["optional_i32"] = value
    elif "optional_i32" in self.operation.attributes:
      del self.operation.attributes["optional_i32"]

  @optional_i32.deleter
  def optional_i32(self):
    del self.operation.attributes["optional_i32"]

  @builtins.property
  def unit(self):
    return "unit" in self.operation.attributes

  @unit.setter
  def unit(self, value):
    if bool(value):
      self.operation.attributes["unit"] = _ods_ir.UnitAttr.get()
    elif "unit" in self.operation.attributes:
      del self.operation.attributes["unit"]

  @unit.deleter
  def unit(self):
    del self.operation.attributes["unit"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DummyOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.dummy_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FirstAttrDeriveAttrOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.first_attr_derive_attr_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, iattr, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["iattr"] = iattr
    _ods_result_type_source_attr = attributes["iattr"]
    _ods_derived_result_type = (
        _ods_ir.TypeAttr(_ods_result_type_source_attr).value
        if _ods_ir.TypeAttr.isinstance(_ods_result_type_source_attr) else
        _ods_result_type_source_attr.type)
    results.extend([_ods_derived_result_type] * 3)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def iattr(self):
    return _ods_ir.Attribute(self.operation.attributes["iattr"])

  @iattr.setter
  def iattr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["iattr"] = value

  @builtins.property
  def one(self):
    return self.operation.results[0]

  @builtins.property
  def two(self):
    return self.operation.results[1]

  @builtins.property
  def three(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FirstAttrDeriveTypeAttrOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.first_attr_derive_type_attr_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, input, type, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    attributes["type"] = type
    _ods_result_type_source_attr = attributes["type"]
    _ods_derived_result_type = (
        _ods_ir.TypeAttr(_ods_result_type_source_attr).value
        if _ods_ir.TypeAttr.isinstance(_ods_result_type_source_attr) else
        _ods_result_type_source_attr.type)
    results.extend([_ods_derived_result_type] * 2)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def one(self):
    return self.operation.results[0]

  @builtins.property
  def two(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InferResultsImpliedOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.infer_results_implied_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results = _ods_ir.InferTypeOpInterface(InferResultsImpliedOp).inferReturnTypes(
        operands=operands,
        attributes=_ods_ir.DictAttr.get(attributes, context=_ods_context),
        context=_ods_context,
        loc=loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def integer(self):
    return self.operation.results[0]

  @builtins.property
  def flt(self):
    return self.operation.results[1]

  @builtins.property
  def index(self):
    return self.operation.results[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InferResultsOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.infer_results_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results = _ods_ir.InferTypeOpInterface(InferResultsOp).inferReturnTypes(
        operands=operands,
        attributes=_ods_ir.DictAttr.get(attributes, context=_ods_context),
        context=_ods_context,
        loc=loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def single(self):
    return self.operation.results[0]

  @builtins.property
  def doubled(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class OptionalOperandOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.optional_operand_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, input=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if input is not None: operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results = _ods_ir.InferTypeOpInterface(OptionalOperandOp).inferReturnTypes(
        operands=operands,
        attributes=_ods_ir.DictAttr.get(attributes, context=_ods_context),
        context=_ods_context,
        loc=loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PropertyOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.property_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(idx))
    attributes["property"] = property
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def idx(self):
    return self.operation.operands[0]

  @builtins.property
  def property(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["property"])

  @property.setter
  def property(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["property"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SameOperandAndResultTypeOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.same_operand_and_result_type_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, _gen_arg_0, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(_gen_arg_0))
    results.extend([operands[0].type] * 2)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def one(self):
    return self.operation.results[0]

  @builtins.property
  def two(self):
    return self.operation.results[1]
